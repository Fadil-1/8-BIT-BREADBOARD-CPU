1- convert_to_OLED_format.py takes an image, resizes it to 128 by 64, then converts it to the 64(two pixel per column) by 64 format of the OLED display.
It outputs a text file containing the encoded image in a comma-separated hex format to be easily used it in the assembler.

2- cropped_to_hex.py takes a cropped image (smaller than 128 by 64) and outputs it in a comma-separated hex format.

3- points_selector.py captures a region of interest by registering a click on the upper left and lower right corner of an enclosing rectangle respectively.
It outputs(on the terminal) the coordinates of the point on the actual image. 

4- image_cropper.py crops an image by taking the coordinates of the upper right and lower left corner of the area to be cropped.

5- text_to_image.py uses a lookup table to generate a clean 128 by 64 black and white image of a text.

6- save_image_from_video.py outputs the frames from a video as a series of images.

7- comma_to_newline.py rearranges the comma separated data generated by cropped_to_hex.py into a newline separate file. 
This made itr easy t copy the data in the brute-force OLED.asm code.

8- convert_to_OLED_format_bin_and_gray.py has the same capabilities as convert_to_OLED_format.py with the addition of generating grayscale images.
