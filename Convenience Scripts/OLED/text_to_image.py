from PIL import Image, ImageDraw

import numpy as np

# Font data obtained from https://github.com/iegomez/acme-oled/blob/master/font.py
font = [
0x00, 0x00, 0x00, 0x00, 0x00, # (space)
0x00, 0x00, 0x5F, 0x00, 0x00, # !
0x00, 0x07, 0x00, 0x07, 0x00, # "
0x14, 0x7F, 0x14, 0x7F, 0x14, # #
0x24, 0x2A, 0x7F, 0x2A, 0x12, # $
0x23, 0x13, 0x08, 0x64, 0x62, # %
0x36, 0x49, 0x55, 0x22, 0x50, # &
0x00, 0x05, 0x03, 0x00, 0x00, # '
0x00, 0x1C, 0x22, 0x41, 0x00, # (
0x00, 0x41, 0x22, 0x1C, 0x00, # )
0x08, 0x2A, 0x1C, 0x2A, 0x08, # *
0x08, 0x08, 0x3E, 0x08, 0x08, # +
0x00, 0x50, 0x30, 0x00, 0x00, # ,
0x08, 0x08, 0x08, 0x08, 0x08, # -
0x00, 0x60, 0x60, 0x00, 0x00, # .
0x20, 0x10, 0x08, 0x04, 0x02, # /
0x3E, 0x51, 0x49, 0x45, 0x3E, # 0
0x00, 0x42, 0x7F, 0x40, 0x00, # 1
0x42, 0x61, 0x51, 0x49, 0x46, # 2
0x21, 0x41, 0x45, 0x4B, 0x31, # 3
0x18, 0x14, 0x12, 0x7F, 0x10, # 4
0x27, 0x45, 0x45, 0x45, 0x39, # 5
0x3C, 0x4A, 0x49, 0x49, 0x30, # 6
0x01, 0x71, 0x09, 0x05, 0x03, # 7
0x36, 0x49, 0x49, 0x49, 0x36, # 8
0x06, 0x49, 0x49, 0x29, 0x1E, # 9
0x00, 0x36, 0x36, 0x00, 0x00, # :
0x00, 0x56, 0x36, 0x00, 0x00, # ;
0x00, 0x08, 0x14, 0x22, 0x41, # <
0x14, 0x14, 0x14, 0x14, 0x14, # =
0x41, 0x22, 0x14, 0x08, 0x00, # >
0x02, 0x01, 0x51, 0x09, 0x06, # ?
0x32, 0x49, 0x79, 0x41, 0x3E, # @
0x7E, 0x11, 0x11, 0x11, 0x7E, # A
0x7F, 0x49, 0x49, 0x49, 0x36, # B
0x3E, 0x41, 0x41, 0x41, 0x22, # C
0x7F, 0x41, 0x41, 0x22, 0x1C, # D
0x7F, 0x49, 0x49, 0x49, 0x41, # E
0x7F, 0x09, 0x09, 0x01, 0x01, # F
0x3E, 0x41, 0x41, 0x51, 0x32, # G
0x7F, 0x08, 0x08, 0x08, 0x7F, # H
0x00, 0x41, 0x7F, 0x41, 0x00, # I
0x20, 0x40, 0x41, 0x3F, 0x01, # J
0x7F, 0x08, 0x14, 0x22, 0x41, # K
0x7F, 0x40, 0x40, 0x40, 0x40, # L
0x7F, 0x02, 0x04, 0x02, 0x7F, # M
0x7F, 0x04, 0x08, 0x10, 0x7F, # N
0x3E, 0x41, 0x41, 0x41, 0x3E, # O
0x7F, 0x09, 0x09, 0x09, 0x06, # P
0x3E, 0x41, 0x51, 0x21, 0x5E, # Q
0x7F, 0x09, 0x19, 0x29, 0x46, # R
0x46, 0x49, 0x49, 0x49, 0x31, # S
0x01, 0x01, 0x7F, 0x01, 0x01, # T
0x3F, 0x40, 0x40, 0x40, 0x3F, # U
0x1F, 0x20, 0x40, 0x20, 0x1F, # V
0x7F, 0x20, 0x18, 0x20, 0x7F, # W
0x63, 0x14, 0x08, 0x14, 0x63, # X
0x03, 0x04, 0x78, 0x04, 0x03, # Y
0x61, 0x51, 0x49, 0x45, 0x43, # Z
0x00, 0x00, 0x7F, 0x41, 0x41, # [
0x02, 0x04, 0x08, 0x10, 0x20, # "\"
0x41, 0x41, 0x7F, 0x00, 0x00, # ]
0x04, 0x02, 0x01, 0x02, 0x04, # ^
0x40, 0x40, 0x40, 0x40, 0x40, # _
0x00, 0x01, 0x02, 0x04, 0x00, # `
0x20, 0x54, 0x54, 0x54, 0x78, # a
0x7F, 0x48, 0x44, 0x44, 0x38, # b
0x38, 0x44, 0x44, 0x44, 0x20, # c
0x38, 0x44, 0x44, 0x48, 0x7F, # d
0x38, 0x54, 0x54, 0x54, 0x18, # e
0x08, 0x7E, 0x09, 0x01, 0x02, # f
0x08, 0x14, 0x54, 0x54, 0x3C, # g
0x7F, 0x08, 0x04, 0x04, 0x78, # h
0x00, 0x44, 0x7D, 0x40, 0x00, # i
0x20, 0x40, 0x44, 0x3D, 0x00, # j
0x00, 0x7F, 0x10, 0x28, 0x44, # k
0x00, 0x41, 0x7F, 0x40, 0x00, # l
0x7C, 0x04, 0x18, 0x04, 0x78, # m
0x7C, 0x08, 0x04, 0x04, 0x78, # n
0x38, 0x44, 0x44, 0x44, 0x38, # o
0x7C, 0x14, 0x14, 0x14, 0x08, # p
0x08, 0x14, 0x14, 0x18, 0x7C, # q
0x7C, 0x08, 0x04, 0x04, 0x08, # r
0x48, 0x54, 0x54, 0x54, 0x20, # s
0x04, 0x3F, 0x44, 0x40, 0x20, # t
0x3C, 0x40, 0x40, 0x20, 0x7C, # u
0x1C, 0x20, 0x40, 0x20, 0x1C, # v
0x3C, 0x40, 0x30, 0x40, 0x3C, # w
0x44, 0x28, 0x10, 0x28, 0x44, # x
0x0C, 0x50, 0x50, 0x50, 0x3C, # y
0x44, 0x64, 0x54, 0x4C, 0x44, # z
0x00, 0x08, 0x36, 0x41, 0x00, # {
0x00, 0x00, 0x7F, 0x00, 0x00, # |
0x00, 0x41, 0x36, 0x08, 0x00, # }
0x08, 0x08, 0x2A, 0x1C, 0x08, # ->
0x08, 0x1C, 0x2A, 0x08, 0x08# <-
]

# Lookup table for characters
lookup = {' ': 0,'!': 1,'"': 2,'#': 3,'$': 4,'%': 5,
          '&': 6,'\'': 7,'(': 8,')': 9,'*': 10,'+': 11,
          ',': 12,'-': 13,'.': 14,'/': 15,'0': 16,
          '1': 17,'2': 18,'3': 19,'4': 20,'5': 21,
          '6': 22,'7': 23,'8': 24,'9': 25,':': 26,
          ';': 27,'<': 28,'=': 29,'>': 30,'?': 31,
          '@': 32,'A': 33,'B': 34,'C': 35,'D': 36,
          'E': 37,'F': 38,'G': 39,'H': 40,'I': 41,
          'J': 42,'K': 43,'L': 44,'M': 45,'N': 46,
          'O': 47,'P': 48,'Q': 49,'R': 50,'S': 51,
          'T': 52,'U': 53,'V': 54,'W': 55,'X': 56,
          'Y': 57,'Z': 58,'[': 59,'\\': 60,']': 61,
          '^': 62,'_': 63,'`': 64,'a': 65,'b': 66,
          'c': 67,'d': 68,'e': 69,'f': 70,'g': 71,
          'h': 72,'i': 73,'j': 74,'k': 75,'l': 76,
          'm': 77,'n': 78,'o': 79,'p': 80,'q': 81,
          'r': 82,'s': 83,'t': 84,'u': 85,'v': 86,
          'w': 87,'x': 88,'y': 89,'z': 90,'{': 91,
          '|': 92,'}': 93}

def create_image_with_text(text, font, lookup, width=128, height=64):
    # Creates a blank image
    image = Image.new('1', (width, height), "black")
    draw = ImageDraw.Draw(image)
    
    # Character dimensions
    char_width = 5
    char_height = 8
    
    # Drawing offset
    x_offset = 0
    y_offset = 0

    for x, char in enumerate(text, start = 1):
        if char == '\n' : # Newline character
            x_offset = 0  # Resets x offset to the start of the line
            y_offset += char_height  # Moves down a line
            continue  # Skips the rest of the loop

        if char in lookup:
            char_index = lookup[char] * 5  # Starting index for character in font array
            for col in range(5):
                char_byte = font[char_index + col]
                for row in range(8):
                    if char_byte & (1 << row):  # Checks each bit in the byte
                        # Calculates the pixel's x and y positions
                        x = x_offset + col
                        y = y_offset + row
                        draw.point((x, y), fill=1)  # Draws the pixel
                        
        x_offset += char_width + 1  # Moves right to the next character position
        
        if x_offset + char_width > width:  # Checks if there's a need to wrap to the next line
            x_offset = 0
            y_offset += char_height  # Moves down to the next line
            
    return image

text = "\n   Running 16-bit  \n\n  Fibonacci sequence\n\n      @ 17.2 KHz"
image = create_image_with_text(text, font, lookup, 128, 64)
image.save("17.2 KHz.png")  # Saves the image